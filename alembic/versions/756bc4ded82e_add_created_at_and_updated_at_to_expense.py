"""add_created_at_and_updated_at_to_expense

Revision ID: 756bc4ded82e
Revises: 4b2da278f535
Create Date: 2025-09-22 15:08:22.518903

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '756bc4ded82e'
down_revision: Union[str, None] = '4b2da278f535'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_refresh_tokens_token', table_name='refresh_tokens')
    op.drop_table('refresh_tokens')
    
    # Step 1: Add columns as nullable first
    op.add_column('expense', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('expense', sa.Column('updated_at', sa.DateTime(), nullable=True))
    
    # Step 2: Update existing records - set created_at and updated_at based on the expense date
    # For existing records, we'll use the expense date at midnight as created_at
    op.execute("""
        UPDATE expense 
        SET created_at = date::timestamp,
            updated_at = date::timestamp
        WHERE created_at IS NULL
    """)
    
    # Step 3: Make columns non-nullable
    op.alter_column('expense', 'created_at', nullable=False)
    op.alter_column('expense', 'updated_at', nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('expense', 'updated_at')
    op.drop_column('expense', 'created_at')
    op.create_table('refresh_tokens',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('token', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('uuid_user_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['uuid_user_id'], ['users.uuid_id'], name='refresh_tokens_uuid_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='refresh_tokens_pkey')
    )
    op.create_index('ix_refresh_tokens_token', 'refresh_tokens', ['token'], unique=True)
    # ### end Alembic commands ###
